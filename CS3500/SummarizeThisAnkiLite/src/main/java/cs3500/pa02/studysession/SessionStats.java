package cs3500.pa02.studysession;

import java.util.Objects;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Represents the statistics for a study session.
 */
public class SessionStats {

  /**
   * The questions answered.
   */
  private final AtomicInteger answered = new AtomicInteger(0);
  /**
   * The questions changed from easy to hard.
   */
  private final AtomicInteger changedEasyToHard = new AtomicInteger(0);
  /**
   * The questions changed from hard to easy.
   */
  private final AtomicInteger changedHardToEasy = new AtomicInteger(0);
  /**
   * The total hard questions.
   */
  private final AtomicInteger totalHard = new AtomicInteger();
  /**
   * The total easy questions.
   */
  private final AtomicInteger totalEasy = new AtomicInteger();

  /**
   * Instantiates a new Session stats with the number of easy and hard questions.
   *
   * @param totalHard the total hard questions
   * @param totalEasy the total easy questions
   */
  SessionStats(int totalHard, int totalEasy) {
    this.totalHard.set(totalHard);
    this.totalEasy.set(totalEasy);
  }

  /**
   * Updates values for stats based on original card difficulty and new card difficulty.
   *
   * @param original the original card difficulty
   * @param updated  the updated card difficulty based on user input
   * @return the string message showing the difficulty was changed
   */
  public String changeDifficulty(CardDifficulty original, CardDifficulty updated) {
    String message;
    if (original.ordinal() == updated.ordinal()) {
      message =
          "Card difficulty did not change. Difficulty was originally " + original.name()
              .toLowerCase() + '.';
    } else if (original.ordinal() == CardDifficulty.EASY.ordinal()) {
      this.changeEasyToHard();
      message = "Card difficulty changed to hard.";
    } else {
      this.changeHardToEasy();
      message = "Card difficulty changed to easy.";
    }
    return message;
  }

  /**
   * Increments the number of questions changed from hard to easy by one. Also increments the number
   * of questions answered by calling incrementAnswered.
   */
  private void changeHardToEasy() {
    this.changedHardToEasy.incrementAndGet();
    this.totalHard.decrementAndGet();
    this.totalEasy.incrementAndGet();
  }

  /**
   * Increments the number of questions changed from easy to hard by one. Also increments the number
   * of questioned answered by calling incrementAnswered.
   */
  private void changeEasyToHard() {
    this.changedEasyToHard.incrementAndGet();
    this.totalHard.incrementAndGet();
    this.totalEasy.decrementAndGet();
  }

  /**
   * Increments the number of answered questions by one.
   */
  public void incrementAnswered() {
    this.answered.incrementAndGet();
  }

  /**
   * Returns this session stat as a single string formatted as it would be printed out to the user.
   *
   * @return the string representing this session stat
   */
  @Override
  public String toString() {
    return "Good Job! You answered "
        + this.answered.get()
        + " question(s).\n\n"
        + this.changedEasyToHard.get() + " question(s) went from easy to hard.\n"
        + this.changedHardToEasy.get() + " question(s) went from hard to easy.\n\n"
        + "Current Counts in Question Bank:\n"
        + this.totalHard.get() + " Hard Question(s)\n"
        + this.totalEasy.get() + " Easy Question(s)";
  }

  /**
   * Determines if a given obj and this session stat are equal based on their fields.
   *
   * @param obj the object this card is being compared to
   * @return whether the given object and this session stat are equal
   */
  @Override
  public boolean equals(Object obj) {
    boolean result = false;
    if (obj != null) {
      if (this.getClass() == obj.getClass()) {
        SessionStats other = (SessionStats) obj;
        result = this.toString().equals(other.toString());
      }
    }
    return result;
  }

  /**
   * Returns the hashCode for this session stat that's used for bucketing in Hash implementations.
   *
   * @return hash generated by the hashing algorithm
   */
  @Override
  public int hashCode() {
    return Objects.hash(this.answered.get(),
        this.changedEasyToHard.get(), this.changedHardToEasy.get(),
        this.totalHard.get(), this.totalEasy.get());
  }
}
